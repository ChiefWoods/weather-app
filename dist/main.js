(()=>{var n={28:(n,t,e)=>{"use strict";e.d(t,{Z:()=>g});var r=e(7537),i=e.n(r),o=e(3645),a=e.n(o),s=e(1667),c=e.n(s),u=new URL(e(6453),e.b),d=a()(i()),p=c()(u);d.push([n.id,`@font-face {\n  font-family: Urbanist;\n  src: url(${p}) format('truetype');\n}\n\n:root {\n  --offwhite: #FAF9F6;\n  --sunny-orange: #FFB400;\n  --toggle-grey: slategrey;\n  --fs-xl: 3.4rem;\n  --fs-l: 2.8rem;\n  --fs-m: 2.4rem;\n  --fs-s: 1.8rem;\n  --fs-xs: 1.5rem;\n  --fs-xxs: 1.2rem;\n  --toggle-width: 40px;\n  --toggle-height: calc(var(--toggle-width) / 2);\n  --slider-height: calc(var(--toggle-height) * 0.8);\n}\n\nbody {\n  background-size: cover;\n  background-position: bottom;\n}\n\nbody * {\n  font-family: 'Urbanist', sans-serif;\n  color: var(--offwhite);\n}\n\n/* Header */\n\nheader {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: max(3%, 20px) 5% 10px;\n  gap: 15px;\n}\n\nform {\n  border-bottom: 2px solid var(--offwhite);\n  display: flex;\n  align-items: center;\n}\n\n.search-input {\n  height: 40px;\n  width: 275px;\n  padding: 4px;\n  background: transparent;\n  border: none;\n  outline: none;\n  font-size: var(--fs-xs);\n  letter-spacing: 0.1rem;\n}\n\n.search-input::placeholder {\n  font-size: var(--fs-xs);\n  color: var(--offwhite);\n  letter-spacing: 0.1rem;\n}\n\n.search-button {\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  padding: 5px 6px;\n}\n\n.search-button > img {\n  width: 25px;\n  aspect-ratio: 1 / 1;\n}\n\n/* Toggle */\n\nheader > div {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.toggle-text {\n  font-size: var(--fs-xs);\n  font-weight: bold;\n}\n\n.toggle {\n  position: relative;\n  display: inline-block;\n  width: var(--toggle-width);\n  height: var(--toggle-height);\n}\n\n.toggle > input {\n  display: none;\n}\n\n.slider {\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: var(--toggle-grey);\n  transition: 0.2s;\n  border-radius: var(--toggle-height);\n}\n\n.slider:before {\n  position: absolute;\n  content: "";\n  height: var(--slider-height);\n  width: var(--slider-height);\n  left: calc(var(--slider-height) * 0.25);\n  bottom: calc(var(--slider-height) * 0.1);\n  background-color: var(--offwhite);\n  transition: 0.2s;\n  border-radius: 50%;\n}\n\n.toggle > input:checked + .slider {\n  background: var(--sunny-orange);\n}\n\n.toggle > input:checked + .slider::before {\n  transform: translateX(var(--slider-height));\n}\n\n/* Main */\n\nmain {\n  display: flex;\n  flex: 1;\n  padding-inline: 5%;\n  justify-content: space-between;\n  align-items: center;\n  gap: 20px;\n}\n\n/* Current */\n\n.current-info {\n  display: grid;\n  grid-template-rows: 1fr auto 1fr;\n}\n\n.error {\n  font-size: var(--fs-xxs);\n  visibility: hidden;\n  margin-bottom: 20px;\n}\n\n.current-location, .condition-text {\n  font-size: var(--fs-l);\n  font-weight: bold;\n}\n\n.current-day, .current-time {\n  font-size: var(--fs-s);\n}\n\n.current-temp {\n  font-size: var(--fs-xl);\n  font-weight: bold;\n  margin-top: 12px;\n}\n\n.current-condition {\n  width: 80px;\n}\n\n.current-detail {\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-auto-rows: auto;\n  gap: 20px;\n}\n\n.current-detail > li {\n  display: grid;\n  grid-template: auto auto / auto 1fr;\n  gap: 0 10px;\n  align-items: center;\n}\n\n.detail-icon {\n  width: 30px;\n  grid-area: span 2;\n  align-self: center;\n}\n\n.detail-title {\n  font-size: var(--fs-xs);\n  height: fit-content;\n  white-space: nowrap;\n}\n\n.detail-text {\n  font-size: var(--fs-m);\n  font-weight: bold;\n  white-space: nowrap;\n}\n\n/* Section */\n\nsection {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 10px 5% max(3%, 20px);\n  width: 100%;\n}\n\n.forecast-options {\n  display: flex;\n  gap: 30px;\n}\n\n.forecast-options > button {\n  font-size: 2.2rem;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  padding-bottom: 8px;\n}\n\n.forecast-options > button:disabled {\n  border-bottom: 2px solid var(--offwhite) !important;\n}\n\nsection > ul {\n  padding-bottom: 20px;\n  list-style-type: none;\n}\n\n/* Scrollbar */\n\nsection > ul::-webkit-scrollbar {\n  height: 12px;\n  width: 12px;\n}\n\nsection > ul::-webkit-scrollbar-track {\n  border-radius: 12px;\n  background-color: var(--toggle-grey);\n}\n\nsection > ul::-webkit-scrollbar-thumb {\n  border-radius: 12px;\n  background-color: var(--offwhite);\n}\n\n.forecast-hourly, .forecast-daily {\n  display: flex;\n  gap: max(calc(100% / 12), 30px);\n  overflow-x: auto;\n  scroll-snap-type: x mandatory;\n}\n\n.forecast-hourly > li, .forecast-daily > li {\n  scroll-snap-align: start;\n}\n\n.hourly-time, .daily-day {\n  font-size: var(--fs-xs);\n  white-space: nowrap;\n}\n\n.forecast-icons {\n  width: 40px;\n}\n\n.hourly-temp, .daily-temp-max {\n  font-size: var(--fs-m);\n  font-weight: bold;\n  white-space: nowrap;\n}\n\n.daily-temp-min {\n  font-size: var(--fs-xs);\n  white-space: nowrap;\n}\n\n/* Overlay */\n\n.overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 5;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.4);\n  display: none;\n  align-items: center;\n  justify-content: center;\n}\n\n.overlay > p {\n  font-size: var(--fs-xl);\n}\n\n@media (max-width: 576px) {\n  main {\n    flex-direction: column;\n  }\n\n  .search-input {\n    width: 150px;\n  }\n\n  main {\n    align-items: unset;\n  }\n\n  .current-info {\n    grid-template-rows: 1fr auto;\n  }\n\n  .current-detail {\n    padding-block: 30px;\n  }\n\n  .current-detail > li {\n    grid-template: auto / auto 1fr auto;\n  }\n}\n`,"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"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",sourcesContent:["@font-face {\n  font-family: Urbanist;\n  src: url(fonts/Urbanist/Urbanist-VariableFont_wght.ttf) format('truetype');\n}\n\n:root {\n  --offwhite: #FAF9F6;\n  --sunny-orange: #FFB400;\n  --toggle-grey: slategrey;\n  --fs-xl: 3.4rem;\n  --fs-l: 2.8rem;\n  --fs-m: 2.4rem;\n  --fs-s: 1.8rem;\n  --fs-xs: 1.5rem;\n  --fs-xxs: 1.2rem;\n  --toggle-width: 40px;\n  --toggle-height: calc(var(--toggle-width) / 2);\n  --slider-height: calc(var(--toggle-height) * 0.8);\n}\n\nbody {\n  background-size: cover;\n  background-position: bottom;\n}\n\nbody * {\n  font-family: 'Urbanist', sans-serif;\n  color: var(--offwhite);\n}\n\n/* Header */\n\nheader {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: max(3%, 20px) 5% 10px;\n  gap: 15px;\n}\n\nform {\n  border-bottom: 2px solid var(--offwhite);\n  display: flex;\n  align-items: center;\n}\n\n.search-input {\n  height: 40px;\n  width: 275px;\n  padding: 4px;\n  background: transparent;\n  border: none;\n  outline: none;\n  font-size: var(--fs-xs);\n  letter-spacing: 0.1rem;\n}\n\n.search-input::placeholder {\n  font-size: var(--fs-xs);\n  color: var(--offwhite);\n  letter-spacing: 0.1rem;\n}\n\n.search-button {\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  padding: 5px 6px;\n}\n\n.search-button > img {\n  width: 25px;\n  aspect-ratio: 1 / 1;\n}\n\n/* Toggle */\n\nheader > div {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.toggle-text {\n  font-size: var(--fs-xs);\n  font-weight: bold;\n}\n\n.toggle {\n  position: relative;\n  display: inline-block;\n  width: var(--toggle-width);\n  height: var(--toggle-height);\n}\n\n.toggle > input {\n  display: none;\n}\n\n.slider {\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: var(--toggle-grey);\n  transition: 0.2s;\n  border-radius: var(--toggle-height);\n}\n\n.slider:before {\n  position: absolute;\n  content: \"\";\n  height: var(--slider-height);\n  width: var(--slider-height);\n  left: calc(var(--slider-height) * 0.25);\n  bottom: calc(var(--slider-height) * 0.1);\n  background-color: var(--offwhite);\n  transition: 0.2s;\n  border-radius: 50%;\n}\n\n.toggle > input:checked + .slider {\n  background: var(--sunny-orange);\n}\n\n.toggle > input:checked + .slider::before {\n  transform: translateX(var(--slider-height));\n}\n\n/* Main */\n\nmain {\n  display: flex;\n  flex: 1;\n  padding-inline: 5%;\n  justify-content: space-between;\n  align-items: center;\n  gap: 20px;\n}\n\n/* Current */\n\n.current-info {\n  display: grid;\n  grid-template-rows: 1fr auto 1fr;\n}\n\n.error {\n  font-size: var(--fs-xxs);\n  visibility: hidden;\n  margin-bottom: 20px;\n}\n\n.current-location, .condition-text {\n  font-size: var(--fs-l);\n  font-weight: bold;\n}\n\n.current-day, .current-time {\n  font-size: var(--fs-s);\n}\n\n.current-temp {\n  font-size: var(--fs-xl);\n  font-weight: bold;\n  margin-top: 12px;\n}\n\n.current-condition {\n  width: 80px;\n}\n\n.current-detail {\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-auto-rows: auto;\n  gap: 20px;\n}\n\n.current-detail > li {\n  display: grid;\n  grid-template: auto auto / auto 1fr;\n  gap: 0 10px;\n  align-items: center;\n}\n\n.detail-icon {\n  width: 30px;\n  grid-area: span 2;\n  align-self: center;\n}\n\n.detail-title {\n  font-size: var(--fs-xs);\n  height: fit-content;\n  white-space: nowrap;\n}\n\n.detail-text {\n  font-size: var(--fs-m);\n  font-weight: bold;\n  white-space: nowrap;\n}\n\n/* Section */\n\nsection {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 10px 5% max(3%, 20px);\n  width: 100%;\n}\n\n.forecast-options {\n  display: flex;\n  gap: 30px;\n}\n\n.forecast-options > button {\n  font-size: 2.2rem;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  padding-bottom: 8px;\n}\n\n.forecast-options > button:disabled {\n  border-bottom: 2px solid var(--offwhite) !important;\n}\n\nsection > ul {\n  padding-bottom: 20px;\n  list-style-type: none;\n}\n\n/* Scrollbar */\n\nsection > ul::-webkit-scrollbar {\n  height: 12px;\n  width: 12px;\n}\n\nsection > ul::-webkit-scrollbar-track {\n  border-radius: 12px;\n  background-color: var(--toggle-grey);\n}\n\nsection > ul::-webkit-scrollbar-thumb {\n  border-radius: 12px;\n  background-color: var(--offwhite);\n}\n\n.forecast-hourly, .forecast-daily {\n  display: flex;\n  gap: max(calc(100% / 12), 30px);\n  overflow-x: auto;\n  scroll-snap-type: x mandatory;\n}\n\n.forecast-hourly > li, .forecast-daily > li {\n  scroll-snap-align: start;\n}\n\n.hourly-time, .daily-day {\n  font-size: var(--fs-xs);\n  white-space: nowrap;\n}\n\n.forecast-icons {\n  width: 40px;\n}\n\n.hourly-temp, .daily-temp-max {\n  font-size: var(--fs-m);\n  font-weight: bold;\n  white-space: nowrap;\n}\n\n.daily-temp-min {\n  font-size: var(--fs-xs);\n  white-space: nowrap;\n}\n\n/* Overlay */\n\n.overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 5;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.4);\n  display: none;\n  align-items: center;\n  justify-content: center;\n}\n\n.overlay > p {\n  font-size: var(--fs-xl);\n}\n\n@media (max-width: 576px) {\n  main {\n    flex-direction: column;\n  }\n\n  .search-input {\n    width: 150px;\n  }\n\n  main {\n    align-items: unset;\n  }\n\n  .current-info {\n    grid-template-rows: 1fr auto;\n  }\n\n  .current-detail {\n    padding-block: 30px;\n  }\n\n  .current-detail > li {\n    grid-template: auto / auto 1fr auto;\n  }\n}\n"],sourceRoot:""}]);const g=d},3645:n=>{"use strict";n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,i,o){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var u=0;u<n.length;u++){var d=[].concat(n[u]);r&&a[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),t.push(d))}},t}},1667:n=>{"use strict";n.exports=function(n,t){return t||(t={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),t.hash&&(n+=t.hash),/["'() \t\n]|(%20)/.test(n)||t.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},7537:n=>{"use strict";n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},3379:n=>{"use strict";var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var o={},a=[],s=0;s<n.length;s++){var c=n[s],u=r.base?c[0]+r.base:c[0],d=o[u]||0,p="".concat(u," ").concat(d);o[u]=d+1;var g=e(p),l={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==g)t[g].references++,t[g].updater(l);else{var h=i(l,r);r.byIndex=s,t.splice(s,0,{identifier:p,updater:h,references:1})}a.push(p)}return a}function i(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,i){var o=r(n=n||[],i=i||{});return function(n){n=n||[];for(var a=0;a<o.length;a++){var s=e(o[a]);t[s].references--}for(var c=r(n,i),u=0;u<o.length;u++){var d=e(o[u]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}o=c}}},569:n=>{"use strict";var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},9216:n=>{"use strict";n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},3565:(n,t,e)=>{"use strict";n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},7795:n=>{"use strict";n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var i=void 0!==e.layer;i&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,i&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},4589:n=>{"use strict";n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},9464:(n,t,e)=>{var r={"./day/113.png":1022,"./day/116.png":7406,"./day/119.png":9945,"./day/122.png":7385,"./day/143.png":9747,"./day/176.png":3740,"./day/179.png":89,"./day/182.png":38,"./day/185.png":4354,"./day/200.png":2647,"./day/227.png":5629,"./day/230.png":9611,"./day/248.png":621,"./day/260.png":7186,"./day/263.png":3846,"./day/266.png":1864,"./day/281.png":6787,"./day/284.png":6620,"./day/293.png":124,"./day/296.png":4939,"./day/299.png":7234,"./day/302.png":5161,"./day/305.png":3599,"./day/308.png":6526,"./day/311.png":8806,"./day/314.png":8292,"./day/317.png":2563,"./day/320.png":6934,"./day/323.png":343,"./day/326.png":2943,"./day/329.png":1602,"./day/332.png":7047,"./day/335.png":9654,"./day/338.png":894,"./day/350.png":9018,"./day/353.png":3495,"./day/356.png":5038,"./day/359.png":9955,"./day/362.png":6257,"./day/365.png":9396,"./day/368.png":33,"./day/371.png":8785,"./day/374.png":2096,"./day/377.png":9738,"./day/386.png":4951,"./day/389.png":3413,"./day/392.png":9720,"./day/395.png":1935,"./night/113.png":7284,"./night/116.png":4237,"./night/119.png":3791,"./night/122.png":1335,"./night/143.png":7022,"./night/176.png":9685,"./night/179.png":109,"./night/182.png":2800,"./night/185.png":7914,"./night/200.png":8883,"./night/227.png":7779,"./night/230.png":6278,"./night/248.png":3366,"./night/260.png":2461,"./night/263.png":9609,"./night/266.png":6768,"./night/281.png":5947,"./night/284.png":92,"./night/293.png":472,"./night/296.png":4654,"./night/299.png":4771,"./night/302.png":4042,"./night/305.png":205,"./night/308.png":5106,"./night/311.png":1901,"./night/314.png":8829,"./night/317.png":5323,"./night/320.png":700,"./night/323.png":7006,"./night/326.png":2520,"./night/329.png":7618,"./night/332.png":5051,"./night/335.png":7365,"./night/338.png":7458,"./night/350.png":5201,"./night/353.png":7834,"./night/356.png":2622,"./night/359.png":6488,"./night/362.png":722,"./night/365.png":7718,"./night/368.png":697,"./night/371.png":7491,"./night/374.png":7456,"./night/377.png":3501,"./night/386.png":7410,"./night/389.png":5923,"./night/392.png":9735,"./night/395.png":9937,"icons/day/113.png":1022,"icons/day/116.png":7406,"icons/day/119.png":9945,"icons/day/122.png":7385,"icons/day/143.png":9747,"icons/day/176.png":3740,"icons/day/179.png":89,"icons/day/182.png":38,"icons/day/185.png":4354,"icons/day/200.png":2647,"icons/day/227.png":5629,"icons/day/230.png":9611,"icons/day/248.png":621,"icons/day/260.png":7186,"icons/day/263.png":3846,"icons/day/266.png":1864,"icons/day/281.png":6787,"icons/day/284.png":6620,"icons/day/293.png":124,"icons/day/296.png":4939,"icons/day/299.png":7234,"icons/day/302.png":5161,"icons/day/305.png":3599,"icons/day/308.png":6526,"icons/day/311.png":8806,"icons/day/314.png":8292,"icons/day/317.png":2563,"icons/day/320.png":6934,"icons/day/323.png":343,"icons/day/326.png":2943,"icons/day/329.png":1602,"icons/day/332.png":7047,"icons/day/335.png":9654,"icons/day/338.png":894,"icons/day/350.png":9018,"icons/day/353.png":3495,"icons/day/356.png":5038,"icons/day/359.png":9955,"icons/day/362.png":6257,"icons/day/365.png":9396,"icons/day/368.png":33,"icons/day/371.png":8785,"icons/day/374.png":2096,"icons/day/377.png":9738,"icons/day/386.png":4951,"icons/day/389.png":3413,"icons/day/392.png":9720,"icons/day/395.png":1935,"icons/night/113.png":7284,"icons/night/116.png":4237,"icons/night/119.png":3791,"icons/night/122.png":1335,"icons/night/143.png":7022,"icons/night/176.png":9685,"icons/night/179.png":109,"icons/night/182.png":2800,"icons/night/185.png":7914,"icons/night/200.png":8883,"icons/night/227.png":7779,"icons/night/230.png":6278,"icons/night/248.png":3366,"icons/night/260.png":2461,"icons/night/263.png":9609,"icons/night/266.png":6768,"icons/night/281.png":5947,"icons/night/284.png":92,"icons/night/293.png":472,"icons/night/296.png":4654,"icons/night/299.png":4771,"icons/night/302.png":4042,"icons/night/305.png":205,"icons/night/308.png":5106,"icons/night/311.png":1901,"icons/night/314.png":8829,"icons/night/317.png":5323,"icons/night/320.png":700,"icons/night/323.png":7006,"icons/night/326.png":2520,"icons/night/329.png":7618,"icons/night/332.png":5051,"icons/night/335.png":7365,"icons/night/338.png":7458,"icons/night/350.png":5201,"icons/night/353.png":7834,"icons/night/356.png":2622,"icons/night/359.png":6488,"icons/night/362.png":722,"icons/night/365.png":7718,"icons/night/368.png":697,"icons/night/371.png":7491,"icons/night/374.png":7456,"icons/night/377.png":3501,"icons/night/386.png":7410,"icons/night/389.png":5923,"icons/night/392.png":9735,"icons/night/395.png":9937};function i(n){var t=o(n);return e(t)}function o(n){if(!e.o(r,n)){var t=new Error("Cannot find module '"+n+"'");throw t.code="MODULE_NOT_FOUND",t}return r[n]}i.keys=function(){return Object.keys(r)},i.resolve=o,n.exports=i,i.id=9464},9977:(n,t,e)=>{var r={"./cloudy.jpg":308,"./foggy.jpg":7548,"./night.jpg":5674,"./rain.jpg":7289,"./snowy.jpg":6680,"./sunny.jpg":1370,"./thunder.jpg":2879,"images/cloudy.jpg":308,"images/foggy.jpg":7548,"images/night.jpg":5674,"images/rain.jpg":7289,"images/snowy.jpg":6680,"images/sunny.jpg":1370,"images/thunder.jpg":2879};function i(n){var t=o(n);return e(t)}function o(n){if(!e.o(r,n)){var t=new Error("Cannot find module '"+n+"'");throw t.code="MODULE_NOT_FOUND",t}return r[n]}i.keys=function(){return Object.keys(r)},i.resolve=o,n.exports=i,i.id=9977},6453:(n,t,e)=>{"use strict";n.exports=e.p+"fonts/Urbanist/Urbanist-VariableFont_wght.ttf"},1022:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/113.png"},7406:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/116.png"},9945:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/119.png"},7385:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/122.png"},9747:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/143.png"},3740:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/176.png"},89:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/179.png"},38:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/182.png"},4354:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/185.png"},2647:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/200.png"},5629:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/227.png"},9611:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/230.png"},621:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/248.png"},7186:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/260.png"},3846:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/263.png"},1864:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/266.png"},6787:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/281.png"},6620:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/284.png"},124:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/293.png"},4939:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/296.png"},7234:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/299.png"},5161:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/302.png"},3599:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/305.png"},6526:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/308.png"},8806:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/311.png"},8292:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/314.png"},2563:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/317.png"},6934:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/320.png"},343:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/323.png"},2943:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/326.png"},1602:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/329.png"},7047:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/332.png"},9654:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/335.png"},894:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/338.png"},9018:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/350.png"},3495:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/353.png"},5038:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/356.png"},9955:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/359.png"},6257:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/362.png"},9396:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/365.png"},33:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/368.png"},8785:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/371.png"},2096:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/374.png"},9738:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/377.png"},4951:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/386.png"},3413:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/389.png"},9720:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/392.png"},1935:(n,t,e)=>{"use strict";n.exports=e.p+"icons/day/395.png"},7284:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/113.png"},4237:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/116.png"},3791:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/119.png"},1335:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/122.png"},7022:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/143.png"},9685:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/176.png"},109:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/179.png"},2800:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/182.png"},7914:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/185.png"},8883:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/200.png"},7779:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/227.png"},6278:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/230.png"},3366:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/248.png"},2461:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/260.png"},9609:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/263.png"},6768:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/266.png"},5947:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/281.png"},92:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/284.png"},472:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/293.png"},4654:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/296.png"},4771:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/299.png"},4042:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/302.png"},205:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/305.png"},5106:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/308.png"},1901:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/311.png"},8829:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/314.png"},5323:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/317.png"},700:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/320.png"},7006:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/323.png"},2520:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/326.png"},7618:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/329.png"},5051:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/332.png"},7365:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/335.png"},7458:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/338.png"},5201:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/350.png"},7834:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/353.png"},2622:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/356.png"},6488:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/359.png"},722:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/362.png"},7718:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/365.png"},697:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/368.png"},7491:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/371.png"},7456:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/374.png"},3501:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/377.png"},7410:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/386.png"},5923:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/389.png"},9735:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/392.png"},9937:(n,t,e)=>{"use strict";n.exports=e.p+"icons/night/395.png"},308:(n,t,e)=>{"use strict";n.exports=e.p+"images/cloudy.jpg"},7548:(n,t,e)=>{"use strict";n.exports=e.p+"images/foggy.jpg"},5674:(n,t,e)=>{"use strict";n.exports=e.p+"images/night.jpg"},7289:(n,t,e)=>{"use strict";n.exports=e.p+"images/rain.jpg"},6680:(n,t,e)=>{"use strict";n.exports=e.p+"images/snowy.jpg"},1370:(n,t,e)=>{"use strict";n.exports=e.p+"images/sunny.jpg"},2879:(n,t,e)=>{"use strict";n.exports=e.p+"images/thunder.jpg"}},t={};function e(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={id:r,exports:{}};return n[r](o,o.exports,e),o.exports}e.m=n,e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var r=t.getElementsByTagName("script");if(r.length)for(var i=r.length-1;i>-1&&!n;)n=r[i--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.b=document.baseURI||self.location.href,e.nc=void 0,(()=>{"use strict";var n=e(3379),t=e.n(n),r=e(7795),i=e.n(r),o=e(569),a=e.n(o),s=e(3565),c=e.n(s),u=e(9216),d=e.n(u),p=e(4589),g=e.n(p),l=e(28),h={};h.styleTagTransform=g(),h.setAttributes=c(),h.insert=a().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=d(),t()(l.Z,h),l.Z&&l.Z.locals&&l.Z.locals;class A{static isMetric(){return JSON.parse(localStorage.getItem("isMetric"))}static setSystem(n){localStorage.setItem("isMetric",JSON.stringify(n))}static toggleSystem(){this.setSystem(!this.isMetric())}static getForecast(){return JSON.parse(sessionStorage.getItem("forecast"))}static setForecast(n){sessionStorage.setItem("forecast",JSON.stringify(n))}static isHourly(){return JSON.parse(localStorage.getItem("isHourly"))}static setHourly(n){localStorage.setItem("isHourly",JSON.stringify(n))}static toggleHourly(){this.setHourly(!this.isHourly())}}function f(n){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},f(n)}function m(n,t){if(t.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+t.length+" present")}function y(n){m(1,arguments);var t=Object.prototype.toString.call(n);return n instanceof Date||"object"===f(n)&&"[object Date]"===t?new Date(n.getTime()):"number"==typeof n||"[object Number]"===t?new Date(n):("string"!=typeof n&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function v(n){if(null===n||!0===n||!1===n)return NaN;var t=Number(n);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function b(n){m(1,arguments);var t=y(n),e=t.getUTCDay(),r=(e<1?7:0)+e-1;return t.setUTCDate(t.getUTCDate()-r),t.setUTCHours(0,0,0,0),t}function x(n){m(1,arguments);var t=y(n),e=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(e+1,0,4),r.setUTCHours(0,0,0,0);var i=b(r),o=new Date(0);o.setUTCFullYear(e,0,4),o.setUTCHours(0,0,0,0);var a=b(o);return t.getTime()>=i.getTime()?e+1:t.getTime()>=a.getTime()?e:e-1}var C={};function w(){return C}function E(n,t){var e,r,i,o,a,s,c,u;m(1,arguments);var d=w(),p=v(null!==(e=null!==(r=null!==(i=null!==(o=null==t?void 0:t.weekStartsOn)&&void 0!==o?o:null==t||null===(a=t.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==i?i:d.weekStartsOn)&&void 0!==r?r:null===(c=d.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==e?e:0);if(!(p>=0&&p<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var g=y(n),l=g.getUTCDay(),h=(l<p?7:0)+l-p;return g.setUTCDate(g.getUTCDate()-h),g.setUTCHours(0,0,0,0),g}function B(n,t){var e,r,i,o,a,s,c,u;m(1,arguments);var d=y(n),p=d.getUTCFullYear(),g=w(),l=v(null!==(e=null!==(r=null!==(i=null!==(o=null==t?void 0:t.firstWeekContainsDate)&&void 0!==o?o:null==t||null===(a=t.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==i?i:g.firstWeekContainsDate)&&void 0!==r?r:null===(c=g.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==e?e:1);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=new Date(0);h.setUTCFullYear(p+1,0,l),h.setUTCHours(0,0,0,0);var A=E(h,t),f=new Date(0);f.setUTCFullYear(p,0,l),f.setUTCHours(0,0,0,0);var b=E(f,t);return d.getTime()>=A.getTime()?p+1:d.getTime()>=b.getTime()?p:p-1}function T(n,t){for(var e=n<0?"-":"",r=Math.abs(n).toString();r.length<t;)r="0"+r;return e+r}const k=function(n,t){var e=n.getUTCFullYear(),r=e>0?e:1-e;return T("yy"===t?r%100:r,t.length)},S=function(n,t){var e=n.getUTCMonth();return"M"===t?String(e+1):T(e+1,2)},M=function(n,t){return T(n.getUTCDate(),t.length)},D=function(n,t){return T(n.getUTCHours()%12||12,t.length)},W=function(n,t){return T(n.getUTCHours(),t.length)},U=function(n,t){return T(n.getUTCMinutes(),t.length)},j=function(n,t){return T(n.getUTCSeconds(),t.length)},P=function(n,t){var e=t.length,r=n.getUTCMilliseconds();return T(Math.floor(r*Math.pow(10,e-3)),t.length)};var Y={G:function(n,t,e){var r=n.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return e.era(r,{width:"abbreviated"});case"GGGGG":return e.era(r,{width:"narrow"});default:return e.era(r,{width:"wide"})}},y:function(n,t,e){if("yo"===t){var r=n.getUTCFullYear(),i=r>0?r:1-r;return e.ordinalNumber(i,{unit:"year"})}return k(n,t)},Y:function(n,t,e,r){var i=B(n,r),o=i>0?i:1-i;return"YY"===t?T(o%100,2):"Yo"===t?e.ordinalNumber(o,{unit:"year"}):T(o,t.length)},R:function(n,t){return T(x(n),t.length)},u:function(n,t){return T(n.getUTCFullYear(),t.length)},Q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return T(r,2);case"Qo":return e.ordinalNumber(r,{unit:"quarter"});case"QQQ":return e.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(r,{width:"narrow",context:"formatting"});default:return e.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return T(r,2);case"qo":return e.ordinalNumber(r,{unit:"quarter"});case"qqq":return e.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(r,{width:"narrow",context:"standalone"});default:return e.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,t,e){var r=n.getUTCMonth();switch(t){case"M":case"MM":return S(n,t);case"Mo":return e.ordinalNumber(r+1,{unit:"month"});case"MMM":return e.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(r,{width:"narrow",context:"formatting"});default:return e.month(r,{width:"wide",context:"formatting"})}},L:function(n,t,e){var r=n.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return T(r+1,2);case"Lo":return e.ordinalNumber(r+1,{unit:"month"});case"LLL":return e.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(r,{width:"narrow",context:"standalone"});default:return e.month(r,{width:"wide",context:"standalone"})}},w:function(n,t,e,r){var i=function(n,t){m(1,arguments);var e=y(n),r=E(e,t).getTime()-function(n,t){var e,r,i,o,a,s,c,u;m(1,arguments);var d=w(),p=v(null!==(e=null!==(r=null!==(i=null!==(o=null==t?void 0:t.firstWeekContainsDate)&&void 0!==o?o:null==t||null===(a=t.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==i?i:d.firstWeekContainsDate)&&void 0!==r?r:null===(c=d.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==e?e:1),g=B(n,t),l=new Date(0);return l.setUTCFullYear(g,0,p),l.setUTCHours(0,0,0,0),E(l,t)}(e,t).getTime();return Math.round(r/6048e5)+1}(n,r);return"wo"===t?e.ordinalNumber(i,{unit:"week"}):T(i,t.length)},I:function(n,t,e){var r=function(n){m(1,arguments);var t=y(n),e=b(t).getTime()-function(n){m(1,arguments);var t=x(n),e=new Date(0);return e.setUTCFullYear(t,0,4),e.setUTCHours(0,0,0,0),b(e)}(t).getTime();return Math.round(e/6048e5)+1}(n);return"Io"===t?e.ordinalNumber(r,{unit:"week"}):T(r,t.length)},d:function(n,t,e){return"do"===t?e.ordinalNumber(n.getUTCDate(),{unit:"date"}):M(n,t)},D:function(n,t,e){var r=function(n){m(1,arguments);var t=y(n),e=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=e-t.getTime();return Math.floor(r/864e5)+1}(n);return"Do"===t?e.ordinalNumber(r,{unit:"dayOfYear"}):T(r,t.length)},E:function(n,t,e){var r=n.getUTCDay();switch(t){case"E":case"EE":case"EEE":return e.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},e:function(n,t,e,r){var i=n.getUTCDay(),o=(i-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return T(o,2);case"eo":return e.ordinalNumber(o,{unit:"day"});case"eee":return e.day(i,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(i,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(i,{width:"short",context:"formatting"});default:return e.day(i,{width:"wide",context:"formatting"})}},c:function(n,t,e,r){var i=n.getUTCDay(),o=(i-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return T(o,t.length);case"co":return e.ordinalNumber(o,{unit:"day"});case"ccc":return e.day(i,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(i,{width:"narrow",context:"standalone"});case"cccccc":return e.day(i,{width:"short",context:"standalone"});default:return e.day(i,{width:"wide",context:"standalone"})}},i:function(n,t,e){var r=n.getUTCDay(),i=0===r?7:r;switch(t){case"i":return String(i);case"ii":return T(i,t.length);case"io":return e.ordinalNumber(i,{unit:"day"});case"iii":return e.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},a:function(n,t,e){var r=n.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,t,e){var r,i=n.getUTCHours();switch(r=12===i?"noon":0===i?"midnight":i/12>=1?"pm":"am",t){case"b":case"bb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,t,e){var r,i=n.getUTCHours();switch(r=i>=17?"evening":i>=12?"afternoon":i>=4?"morning":"night",t){case"B":case"BB":case"BBB":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,t,e){if("ho"===t){var r=n.getUTCHours()%12;return 0===r&&(r=12),e.ordinalNumber(r,{unit:"hour"})}return D(n,t)},H:function(n,t,e){return"Ho"===t?e.ordinalNumber(n.getUTCHours(),{unit:"hour"}):W(n,t)},K:function(n,t,e){var r=n.getUTCHours()%12;return"Ko"===t?e.ordinalNumber(r,{unit:"hour"}):T(r,t.length)},k:function(n,t,e){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===t?e.ordinalNumber(r,{unit:"hour"}):T(r,t.length)},m:function(n,t,e){return"mo"===t?e.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):U(n,t)},s:function(n,t,e){return"so"===t?e.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):j(n,t)},S:function(n,t){return P(n,t)},X:function(n,t,e,r){var i=(r._originalDate||n).getTimezoneOffset();if(0===i)return"Z";switch(t){case"X":return F(i);case"XXXX":case"XX":return z(i);default:return z(i,":")}},x:function(n,t,e,r){var i=(r._originalDate||n).getTimezoneOffset();switch(t){case"x":return F(i);case"xxxx":case"xx":return z(i);default:return z(i,":")}},O:function(n,t,e,r){var i=(r._originalDate||n).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+O(i,":");default:return"GMT"+z(i,":")}},z:function(n,t,e,r){var i=(r._originalDate||n).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+O(i,":");default:return"GMT"+z(i,":")}},t:function(n,t,e,r){var i=r._originalDate||n;return T(Math.floor(i.getTime()/1e3),t.length)},T:function(n,t,e,r){return T((r._originalDate||n).getTime(),t.length)}};function O(n,t){var e=n>0?"-":"+",r=Math.abs(n),i=Math.floor(r/60),o=r%60;if(0===o)return e+String(i);var a=t||"";return e+String(i)+a+T(o,2)}function F(n,t){return n%60==0?(n>0?"-":"+")+T(Math.abs(n)/60,2):z(n,t)}function z(n,t){var e=t||"",r=n>0?"-":"+",i=Math.abs(n);return r+T(Math.floor(i/60),2)+e+T(i%60,2)}const N=Y;var H=function(n,t){switch(n){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},q=function(n,t){switch(n){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};const I={p:q,P:function(n,t){var e,r=n.match(/(P+)(p+)?/)||[],i=r[1],o=r[2];if(!o)return H(n,t);switch(i){case"P":e=t.dateTime({width:"short"});break;case"PP":e=t.dateTime({width:"medium"});break;case"PPP":e=t.dateTime({width:"long"});break;default:e=t.dateTime({width:"full"})}return e.replace("{{date}}",H(i,t)).replace("{{time}}",q(o,t))}};var L=["D","DD"],$=["YY","YYYY"];function _(n,t,e){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var X={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function Q(n){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.width?String(t.width):n.defaultWidth;return n.formats[e]||n.formats[n.defaultWidth]}}const R={date:Q({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:Q({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:Q({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var Z={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function G(n){return function(t,e){var r;if("formatting"===(null!=e&&e.context?String(e.context):"standalone")&&n.formattingValues){var i=n.defaultFormattingWidth||n.defaultWidth,o=null!=e&&e.width?String(e.width):i;r=n.formattingValues[o]||n.formattingValues[i]}else{var a=n.defaultWidth,s=null!=e&&e.width?String(e.width):n.defaultWidth;r=n.values[s]||n.values[a]}return r[n.argumentCallback?n.argumentCallback(t):t]}}const J={ordinalNumber:function(n,t){var e=Number(n),r=e%100;if(r>20||r<10)switch(r%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:G({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:G({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:G({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:G({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:G({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function V(n){return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=e.width,i=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],o=t.match(i);if(!o)return null;var a,s=o[0],c=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],u=Array.isArray(c)?function(n,t){for(var e=0;e<n.length;e++)if(n[e].test(s))return e}(c):function(n,t){for(var e in n)if(n.hasOwnProperty(e)&&n[e].test(s))return e}(c);return a=n.valueCallback?n.valueCallback(u):u,{value:a=e.valueCallback?e.valueCallback(a):a,rest:t.slice(s.length)}}}var K,nn={ordinalNumber:(K={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=n.match(K.matchPattern);if(!e)return null;var r=e[0],i=n.match(K.parsePattern);if(!i)return null;var o=K.valueCallback?K.valueCallback(i[0]):i[0];return{value:o=t.valueCallback?t.valueCallback(o):o,rest:n.slice(r.length)}}),era:V({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:V({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:V({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:V({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:V({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const tn={code:"en-US",formatDistance:function(n,t,e){var r,i=X[n];return r="string"==typeof i?i:1===t?i.one:i.other.replace("{{count}}",t.toString()),null!=e&&e.addSuffix?e.comparison&&e.comparison>0?"in "+r:r+" ago":r},formatLong:R,formatRelative:function(n,t,e,r){return Z[n]},localize:J,match:nn,options:{weekStartsOn:0,firstWeekContainsDate:1}};var en=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,rn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,on=/^'([^]*?)'?$/,an=/''/g,sn=/[a-zA-Z]/;function cn(n,t,e){var r,i,o,a,s,c,u,d,p,g,l,h,A,b,x,C,E,B;m(2,arguments);var T=String(t),k=w(),S=null!==(r=null!==(i=null==e?void 0:e.locale)&&void 0!==i?i:k.locale)&&void 0!==r?r:tn,M=v(null!==(o=null!==(a=null!==(s=null!==(c=null==e?void 0:e.firstWeekContainsDate)&&void 0!==c?c:null==e||null===(u=e.locale)||void 0===u||null===(d=u.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==s?s:k.firstWeekContainsDate)&&void 0!==a?a:null===(p=k.locale)||void 0===p||null===(g=p.options)||void 0===g?void 0:g.firstWeekContainsDate)&&void 0!==o?o:1);if(!(M>=1&&M<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var D=v(null!==(l=null!==(h=null!==(A=null!==(b=null==e?void 0:e.weekStartsOn)&&void 0!==b?b:null==e||null===(x=e.locale)||void 0===x||null===(C=x.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==A?A:k.weekStartsOn)&&void 0!==h?h:null===(E=k.locale)||void 0===E||null===(B=E.options)||void 0===B?void 0:B.weekStartsOn)&&void 0!==l?l:0);if(!(D>=0&&D<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!S.localize)throw new RangeError("locale must contain localize property");if(!S.formatLong)throw new RangeError("locale must contain formatLong property");var W=y(n);if(!function(n){if(m(1,arguments),!function(n){return m(1,arguments),n instanceof Date||"object"===f(n)&&"[object Date]"===Object.prototype.toString.call(n)}(n)&&"number"!=typeof n)return!1;var t=y(n);return!isNaN(Number(t))}(W))throw new RangeError("Invalid time value");var U=function(n){var t=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return t.setUTCFullYear(n.getFullYear()),n.getTime()-t.getTime()}(W),j=function(n,t){return m(2,arguments),function(n,t){m(2,arguments);var e=y(n).getTime(),r=v(t);return new Date(e+r)}(n,-v(t))}(W,U),P={firstWeekContainsDate:M,weekStartsOn:D,locale:S,_originalDate:W};return T.match(rn).map((function(n){var t=n[0];return"p"===t||"P"===t?(0,I[t])(n,S.formatLong):n})).join("").match(en).map((function(r){if("''"===r)return"'";var i,o,a=r[0];if("'"===a)return(o=(i=r).match(on))?o[1].replace(an,"'"):i;var s,c=N[a];if(c)return null!=e&&e.useAdditionalWeekYearTokens||(s=r,-1===$.indexOf(s))||_(r,t,String(n)),null!=e&&e.useAdditionalDayOfYearTokens||!function(n){return-1!==L.indexOf(n)}(r)||_(r,t,String(n)),c(j,r,S.localize,P);if(a.match(sn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return r})).join("")}const un=e.p+"icons/thermometer-lines.svg",dn=e.p+"icons/weather-pouring.svg",pn=e.p+"icons/water-percent.svg",gn=e.p+"icons/weather-windy.svg",ln=(()=>{const n=(n,t,e)=>{const r=document.createElement("li"),i=(()=>{const t="Feels Like"===n?un:"Precipitation"===n?dn:"Humidity"===n?pn:gn;return vn.createImg(t,["detail-icon"],n)})(),o=vn.createText("p",["detail-title"],n),a=(()=>{const r="Feels Like"===n?e?`${Math.round(t.feelslike_c)} °C`:`${Math.round(t.feelslike_f)} °F`:"Precipitation"===n?e?`${t.precip_mm} mm`:`${t.precip_in} in`:"Humidity"===n?`${t.humidity} %`:e?`${t.wind_kph} km/h`:`${t.wind_mph} mph`;return vn.createText("p",["detail-text"],r)})();return r.append(i,o,a),r},t=n=>`${n.name}, ${n.country}`,e=n=>{const[t,e,r]=n.split(" ")[0].split("-");return cn(new Date(t,e-1,r),"EEEE, dd MMMM")},r=n=>{const[t,e]=n.split(" ")[1].split(":");return cn((new Date).setHours(t,e),"h:mm a")},i=(n,t)=>t?`${Math.round(n.temp_c)} °C`:`${Math.round(n.temp_f)} °F`;return{createMain:o=>{const a=document.createElement("main"),s=A.isMetric();return a.append(((n,o)=>{const a=vn.createText("div",["current-info"]),s=vn.createText("p",["error"]);s.innerHTML='Location not found.<br>Search must be in the form of "City", "City, State" or "City, Country".';const c=document.createElement("div"),u=vn.createText("p",["current-location"],t(n.location)),d=vn.createText("p",["current-day"],e(n.location.localtime)),p=vn.createText("p",["current-time"],r(n.location.localtime)),g=vn.createText("p",["current-temp"],i(n.current,o)),l=vn.createImg(vn.getImgSrc(n.current.condition.icon),["current-condition"],n.current.condition.text),h=vn.createText("p",["condition-text"],n.current.condition.text);return c.append(u,d,p,g,l,h),a.append(s,c),a})(o,s),((t,e)=>{const r=vn.createText("ul",["current-detail"]);return r.append(n("Feels Like",t.current,e),n("Precipitation",t.current,e),n("Humidity",t.current,e),n("Wind Speed",t.current,e)),r})(o,s)),a},displayError:()=>{document.querySelector(".error").style.visibility="visible"},hideError:()=>{document.querySelector(".error").style.visibility="hidden"}}})(),hn=(()=>{const n=(n,e)=>{const r=vn.createText("ul",["forecast-hourly"]),i=n.current.last_updated.split(" ")[1].split(":")[0],o=[n.forecast.forecastday[0],n.forecast.forecastday[1]].flatMap((n=>n.hour)),a=o.findIndex((n=>n.time.split(" ")[1].split(":")[0]===i)),s=o.slice(a,a+24),c=[];for(const n of s){const r=n.time.split(" ")[1].split(":")[0]===i;c.push(t(n,e,r))}return r.append(...c),r},t=(n,t,e)=>{const r=document.createElement("li"),i=vn.createText("p",["hourly-time"],e?"Now":s(n.time.split(" ")[1])),o=vn.createImg(vn.getImgSrc(n.condition.icon),["forecast-icons"],n.condition.text),a=vn.createText("p",["hourly-temp"],u(n,t));return r.append(i,o,a),r},e=(n,t)=>{const e=vn.createText("ul",["forecast-daily"]),i=n.location.localtime.split(" ")[0],o=[n.forecast.forecastday[0],n.forecast.forecastday[1],n.forecast.forecastday[2]],a=[];for(const n of o){const e=n.date===i;a.push(r(n,t,e))}return e.append(...a),e},r=(n,t,e)=>{const r=document.createElement("li"),i=vn.createText("p",["daily-day"],e?"Today":c(n.date)),o=vn.createImg(vn.getImgSrc(n.day.condition.icon),["forecast-icons"],n.day.condition.text),a=vn.createText("p",["daily-temp-max"],d(n,t)),s=vn.createText("p",["daily-temp-min"],p(n,t));return r.append(i,o,a,s),r},i=t=>{t.addEventListener("click",(()=>{A.setHourly(!0),a(),document.querySelector(".forecast-daily").replaceWith(n(A.getForecast(),A.isMetric()))}))},o=n=>{n.addEventListener("click",(()=>{A.setHourly(!1),a(),document.querySelector(".forecast-hourly").replaceWith(e(A.getForecast(),A.isMetric()))}))},a=()=>{const n=document.querySelector(".hourly-button"),t=document.querySelector(".daily-button");n.disabled=!n.disabled,t.disabled=!t.disabled},s=n=>{const t=parseInt(n.split(":")[0]);return`${t>12?t-12:0===t?12:t} ${t>=12?"pm":"am"}`},c=n=>cn(new Date(n),"EEE"),u=(n,t)=>t?`${Math.round(n.temp_c)} °C`:`${Math.round(n.temp_f)} °F`,d=(n,t)=>t?`${Math.round(n.day.maxtemp_c)} °C`:`${Math.round(n.day.maxtemp_f)} °F`,p=(n,t)=>t?`${Math.round(n.day.mintemp_c)} °C`:`${Math.round(n.day.mintemp_f)} °F`;return{createSection:(t,r)=>{const a=document.createElement("section"),s=A.isMetric();return a.append((()=>{const n=vn.createText("div",["forecast-options"]),t=vn.createText("button",["hourly-button"],"Hourly");t.disabled=A.isHourly(),i(t);const e=vn.createText("button",["daily-button"],"Daily");return e.disabled=!A.isHourly(),o(e),n.append(t,e),n})(),r?n(t,s):e(t,s)),a}}})(),An=e.p+"icons/magnify.svg",fn=(()=>{const n=n=>{n.addEventListener("click",(t=>{t.preventDefault(),vn.toggleOverlay();const r=n.previousElementSibling;vn.getForecast(r.value).then((n=>{e(n)})).catch((()=>{ln.displayError()})).finally((()=>{r.value="",vn.toggleOverlay()}))}))},t=n=>{n.addEventListener("click",(n=>{n.stopPropagation(),A.toggleSystem();const t=A.getForecast();document.querySelector("main").replaceWith(ln.createMain(t)),document.querySelector("section").replaceWith(hn.createSection(t,A.isHourly()))}))},e=n=>{A.setForecast(n),vn.changeDocumentTitle(n.location),vn.changeBackground(n.current.condition.code,n.location.localtime),document.querySelector("main").replaceWith(ln.createMain(n)),document.querySelector("section").replaceWith(hn.createSection(n,A.isHourly())),ln.hideError()};return{createHeader:()=>{const e=document.createElement("header");return e.append((()=>{const t=document.createElement("form"),e=vn.createText("input",["search-input"]);e.type="text",e.placeholder="Search Location or Zip Code";const r=vn.createText("button",["search-button"]);n(r);const i=vn.createImg(An,"","Search");return r.append(i),t.append(e,r),t})(),(()=>{const n=document.createElement("div"),e=vn.createText("span",["toggle-text"],"°C"),r=vn.createText("label",["toggle"]);r.htmlFor="measurement";const i=document.createElement("input");i.type="checkbox",i.id="measurement",i.checked=!A.isMetric();const o=vn.createText("div",["slider"]);t(o),r.append(i,o);const a=vn.createText("span",["toggle-text"],"°F");return n.append(e,r,a),n})()),e}}})(),mn=e.p+"icons/github.svg",yn=()=>{const n=document.createElement("footer"),t=vn.createText("span",["made-by"],`Copyright @ ${(new Date).getFullYear()} ChiefWoods`),e=vn.createText("a",["github-link"]);e.href="https://github.com/ChiefWoods/weather-app",e.target="_blank";const r=vn.createImg(mn,["github-icon"],"GitHub");return e.append(r),n.append(t,e),n},vn=(()=>{a(e(9977)),a(e(9464));const n={cloudy:[1006,1009],foggy:[1030,1135,1147],rain:[1150,1153,1180,1183,1186,1189,1192,1195,1198,1201,1240,1243,1246,1249,1252],snowy:[1114,1117,1168,1171,1210,1213,1216,1219,1222,1225,1237,1255,1258,1261,1264],sunny:[1e3,1003,1063,1066,1069,1072,1087],thunder:[1273,1276,1279,1282]},t=(n,t,e="")=>{const r=document.createElement(n);return r.classList.add(...t),r.textContent=e,r},r=async n=>{const t=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=dfd6961846f943ac97273304232604&q=${n}&days=7`,{mode:"cors"});return await t.json()},i=n=>{document.title=`${n.name}, ${n.country} | Weather App`},o=(t,e)=>{let r=Object.keys(n).find((e=>n[e].includes(t)));if("sunny"===r){const n=new Date(e).getHours();(n>=19||n<=7)&&(r="night")}document.body.style.backgroundImage=`url('images/${r}.jpg')`};function a(n){n.keys().forEach(n)}return{initialize:()=>{(()=>{const n=document.createElement("link");n.href="https://chiefwoods.github.io/footer-template/template.css",n.rel="stylesheet",n.type="text/css",document.head.appendChild(n)})(),null===A.isMetric()&&A.setSystem(!0),null===A.isHourly()&&A.setHourly(!0),r("auto:ip").then((n=>{A.setForecast(n),i(n.location),o(n.current.condition.code,n.location.localtime),document.body.append(fn.createHeader(),ln.createMain(n),hn.createSection(n,A.isHourly()),(()=>{const n=t("div",["overlay"]),e=t("p",[],"Fetching data...");return n.append(e),n})(),yn())}))},createText:t,createImg:(n,t,e)=>{const r=document.createElement("img");return r.src=n,r.classList.add(...t),r.alt=e,r},getForecast:r,changeDocumentTitle:i,changeBackground:o,toggleOverlay:()=>{const n=document.querySelector(".overlay");n.style.display="flex"===n.style.display?"none":"flex"},getImgSrc:n=>{const t=n.split("/");return`./icons/${t[t.length-2]}/${(n=>{const t=n.lastIndexOf("/")+1,e=n.lastIndexOf(".");return parseInt(n.slice(t,e))})(n)}.png`}}})();vn.initialize()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,